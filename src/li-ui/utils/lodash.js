"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const isObject = (value) => {
    const type = typeof value;
    return value != null && (type == 'object' || type == 'function');
};
const debounce = (func, wait, options) => {
    let lastArgs, lastThis, maxWait, result, timerId, lastCallTime;
    let lastInvokeTime = 0;
    let leading = false;
    let maxing = false;
    let trailing = true;
    if (typeof func != 'function') {
        throw new TypeError('Expected a function');
    }
    wait = +wait || 0;
    if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? Math.max(+options.maxWait || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
    }
    function invokeFunc(time) {
        const args = lastArgs;
        const thisArg = lastThis;
        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
    }
    function startTimer(pendingFunc, wait) {
        return setTimeout(pendingFunc, wait);
    }
    function cancelTimer(id) {
        clearTimeout(id);
    }
    function leadingEdge(time) {
        lastInvokeTime = time;
        timerId = startTimer(timerExpired, wait);
        return leading ? invokeFunc(time) : result;
    }
    function remainingWait(time) {
        const timeSinceLastCall = time - lastCallTime;
        const timeSinceLastInvoke = time - lastInvokeTime;
        const timeWaiting = wait - timeSinceLastCall;
        return maxing
            ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke)
            : timeWaiting;
    }
    function shouldInvoke(time) {
        const timeSinceLastCall = time - lastCallTime;
        const timeSinceLastInvoke = time - lastInvokeTime;
        return (lastCallTime === undefined ||
            timeSinceLastCall >= wait ||
            timeSinceLastCall < 0 ||
            (maxing && timeSinceLastInvoke >= maxWait));
    }
    function timerExpired() {
        const time = Date.now();
        if (shouldInvoke(time)) {
            return trailingEdge(time);
        }
        timerId = startTimer(timerExpired, remainingWait(time));
    }
    function trailingEdge(time) {
        timerId = undefined;
        if (trailing && lastArgs) {
            return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
    }
    function cancel() {
        if (timerId !== undefined) {
            cancelTimer(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
    }
    function flush() {
        return timerId === undefined ? result : trailingEdge(Date.now());
    }
    function pending() {
        return timerId !== undefined;
    }
    function debounced(...args) {
        const time = Date.now();
        const isInvoking = shouldInvoke(time);
        lastArgs = args;
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
            if (timerId === undefined) {
                return leadingEdge(lastCallTime);
            }
            if (maxing) {
                timerId = startTimer(timerExpired, wait);
                return invokeFunc(lastCallTime);
            }
        }
        if (timerId === undefined) {
            timerId = startTimer(timerExpired, wait);
        }
        return result;
    }
    debounced.cancel = cancel;
    debounced.flush = flush;
    debounced.pending = pending;
    return debounced;
};
exports.debounce = debounce;
const throttle = (func, wait, options) => {
    let leading = true;
    let trailing = true;
    if (typeof func != 'function') {
        throw new TypeError('Expected a function');
    }
    if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
    }
    return debounce(func, wait, {
        leading: leading,
        maxWait: wait,
        trailing: trailing
    });
};
exports.throttle = throttle;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9kYXNoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibG9kYXNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxRQUFRLEdBQUcsQ0FBQyxLQUFLLEVBQUUsRUFBRTtJQUN6QixNQUFNLElBQUksR0FBRyxPQUFPLEtBQUssQ0FBQTtJQUN6QixPQUFPLEtBQUssSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksUUFBUSxJQUFJLElBQUksSUFBSSxVQUFVLENBQUMsQ0FBQTtBQUNsRSxDQUFDLENBQUE7QUFFRCxNQUFNLFFBQVEsR0FBRyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEVBQUU7SUFDdkMsSUFBSSxRQUFRLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLFlBQVksQ0FBQTtJQUU5RCxJQUFJLGNBQWMsR0FBRyxDQUFDLENBQUE7SUFDdEIsSUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFBO0lBQ25CLElBQUksTUFBTSxHQUFHLEtBQUssQ0FBQTtJQUNsQixJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUE7SUFFbkIsSUFBSSxPQUFPLElBQUksSUFBSSxVQUFVLEVBQUU7UUFDN0IsTUFBTSxJQUFJLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFBO0tBQzNDO0lBQ0QsSUFBSSxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQTtJQUNqQixJQUFJLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUNyQixPQUFPLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUE7UUFDM0IsTUFBTSxHQUFHLFNBQVMsSUFBSSxPQUFPLENBQUE7UUFDN0IsT0FBTyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUE7UUFDbEUs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QUUsT0FBTyxFQUFFLEVBQUU7SUFDdkMsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFBO0lBQ2xCLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQTtJQUVuQixJQUFJLE9BQU8sSUFBSSxJQUFJLFVBQVUsRUFBRTtRQUM3QixNQUFNLElBQUksU0FBUyxDQUFDLHFCQUFxQixDQUFDLENBQUE7S0FDM0M7SUFDRCxJQUFJLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUNyQixPQUFPLEdBQUcsU0FBUyxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQTtRQUM1RCxRQUFRLEdBQUcsVUFBVSxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQTtLQUNqRTtJQUNELE9BQU8sUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUU7UUFDMUIsT0FBTyxFQUFFLE9BQU87UUFDaEIsT0FBTyxFQUFFLElBQUk7UUFDYixRQUFRLEVBQUUsUUFBUTtLQUNuQixDQUFDLENBQUE7QUFDSixDQUFDLENBQUE7QUFFa0IsNEJBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBpc09iamVjdCA9ICh2YWx1ZSkgPT4ge1xuICBjb25zdCB0eXBlID0gdHlwZW9mIHZhbHVlXG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJylcbn1cblxuY29uc3QgZGVib3VuY2UgPSAoZnVuYywgd2FpdCwgb3B0aW9ucykgPT4ge1xuICBsZXQgbGFzdEFyZ3MsIGxhc3RUaGlzLCBtYXhXYWl0LCByZXN1bHQsIHRpbWVySWQsIGxhc3RDYWxsVGltZVxuXG4gIGxldCBsYXN0SW52b2tlVGltZSA9IDBcbiAgbGV0IGxlYWRpbmcgPSBmYWxzZVxuICBsZXQgbWF4aW5nID0gZmFsc2VcbiAgbGV0IHRyYWlsaW5nID0gdHJ1ZVxuXG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYSBmdW5jdGlvbicpXG4gIH1cbiAgd2FpdCA9ICt3YWl0IHx8IDBcbiAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgbGVhZGluZyA9ICEhb3B0aW9ucy5sZWFkaW5nXG4gICAgbWF4aW5nID0gJ21heFdhaXQnIGluIG9wdGlvbnNcbiAgICBtYXhXYWl0ID0gbWF4aW5nID8gTWF0aC5tYXgoK29wdGlvbnMubWF4V2FpdCB8fCAwLCB3YWl0KSA6IG1heFdhaXRcbiAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nXG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VGdW5jKHRpbWUpIHtcbiAgICBjb25zdCBhcmdzID0gbGFzdEFyZ3NcbiAgICBjb25zdCB0aGlzQXJnID0gbGFzdFRoaXNcblxuICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWRcbiAgICBsYXN0SW52b2tlVGltZSA9IHRpbWVcbiAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgZnVuY3Rpb24gc3RhcnRUaW1lcihwZW5kaW5nRnVuYywgd2FpdCkge1xuICAgIHJldHVybiBzZXRUaW1lb3V0KHBlbmRpbmdGdW5jLCB3YWl0KVxuICB9XG5cbiAgZnVuY3Rpb24gY2FuY2VsVGltZXIoaWQpIHtcbiAgICBjbGVhclRpbWVvdXQoaWQpXG4gIH1cblxuICBmdW5jdGlvbiBsZWFkaW5nRWRnZSh0aW1lKSB7XG4gICAgbGFzdEludm9rZVRpbWUgPSB0aW1lXG4gICAgdGltZXJJZCA9IHN0YXJ0VGltZXIodGltZXJFeHBpcmVkLCB3YWl0KVxuICAgIHJldHVybiBsZWFkaW5nID8gaW52b2tlRnVuYyh0aW1lKSA6IHJlc3VsdFxuICB9XG5cbiAgZnVuY3Rpb24gcmVtYWluaW5nV2FpdCh0aW1lKSB7XG4gICAgY29uc3QgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lXG4gICAgY29uc3QgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZVxuICAgIGNvbnN0IHRpbWVXYWl0aW5nID0gd2FpdCAtIHRpbWVTaW5jZUxhc3RDYWxsXG4gICAgcmV0dXJuIG1heGluZ1xuICAgICAgPyBNYXRoLm1pbih0aW1lV2FpdGluZywgbWF4V2FpdCAtIHRpbWVTaW5jZUxhc3RJbnZva2UpXG4gICAgICA6IHRpbWVXYWl0aW5nXG4gIH1cblxuICBmdW5jdGlvbiBzaG91bGRJbnZva2UodGltZSkge1xuICAgIGNvbnN0IHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZVxuICAgIGNvbnN0IHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWVcbiAgICByZXR1cm4gKFxuICAgICAgbGFzdENhbGxUaW1lID09PSB1bmRlZmluZWQgfHxcbiAgICAgIHRpbWVTaW5jZUxhc3RDYWxsID49IHdhaXQgfHxcbiAgICAgIHRpbWVTaW5jZUxhc3RDYWxsIDwgMCB8fFxuICAgICAgKG1heGluZyAmJiB0aW1lU2luY2VMYXN0SW52b2tlID49IG1heFdhaXQpXG4gICAgKVxuICB9XG5cbiAgZnVuY3Rpb24gdGltZXJFeHBpcmVkKCkge1xuICAgIGNvbnN0IHRpbWUgPSBEYXRlLm5vdygpXG4gICAgaWYgKHNob3VsZEludm9rZSh0aW1lKSkge1xuICAgICAgcmV0dXJuIHRyYWlsaW5nRWRnZSh0aW1lKVxuICAgIH1cbiAgICB0aW1lcklkID0gc3RhcnRUaW1lcih0aW1lckV4cGlyZWQsIHJlbWFpbmluZ1dhaXQodGltZSkpXG4gIH1cblxuICBmdW5jdGlvbiB0cmFpbGluZ0VkZ2UodGltZSkge1xuICAgIHRpbWVySWQgPSB1bmRlZmluZWRcbiAgICBpZiAodHJhaWxpbmcgJiYgbGFzdEFyZ3MpIHtcbiAgICAgIHJldHVybiBpbnZva2VGdW5jKHRpbWUpXG4gICAgfVxuICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWRcbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgaWYgKHRpbWVySWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgY2FuY2VsVGltZXIodGltZXJJZClcbiAgICB9XG4gICAgbGFzdEludm9rZVRpbWUgPSAwXG4gICAgbGFzdEFyZ3MgPSBsYXN0Q2FsbFRpbWUgPSBsYXN0VGhpcyA9IHRpbWVySWQgPSB1bmRlZmluZWRcbiAgfVxuXG4gIGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIHJldHVybiB0aW1lcklkID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiB0cmFpbGluZ0VkZ2UoRGF0ZS5ub3coKSlcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlbmRpbmcoKSB7XG4gICAgcmV0dXJuIHRpbWVySWQgIT09IHVuZGVmaW5lZFxuICB9XG5cbiAgZnVuY3Rpb24gZGVib3VuY2VkKHRoaXM6IGFueSwgLi4uYXJnczogYW55W10pIHtcbiAgICBjb25zdCB0aW1lID0gRGF0ZS5ub3coKVxuICAgIGNvbnN0IGlzSW52b2tpbmcgPSBzaG91bGRJbnZva2UodGltZSlcbiAgICBsYXN0QXJncyA9IGFyZ3NcbiAgICBsYXN0VGhpcyA9IHRoaXNcbiAgICBsYXN0Q2FsbFRpbWUgPSB0aW1lXG4gICAgaWYgKGlzSW52b2tpbmcpIHtcbiAgICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGxlYWRpbmdFZGdlKGxhc3RDYWxsVGltZSlcbiAgICAgIH1cbiAgICAgIGlmIChtYXhpbmcpIHtcbiAgICAgICAgdGltZXJJZCA9IHN0YXJ0VGltZXIodGltZXJFeHBpcmVkLCB3YWl0KVxuICAgICAgICByZXR1cm4gaW52b2tlRnVuYyhsYXN0Q2FsbFRpbWUpXG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRpbWVySWQgPSBzdGFydFRpbWVyKHRpbWVyRXhwaXJlZCwgd2FpdClcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgZGVib3VuY2VkLmNhbmNlbCA9IGNhbmNlbFxuICBkZWJvdW5jZWQuZmx1c2ggPSBmbHVzaFxuICBkZWJvdW5jZWQucGVuZGluZyA9IHBlbmRpbmdcbiAgcmV0dXJuIGRlYm91bmNlZFxufVxuXG5jb25zdCB0aHJvdHRsZSA9IChmdW5jLCB3YWl0LCBvcHRpb25zKSA9PiB7XG4gIGxldCBsZWFkaW5nID0gdHJ1ZVxuICBsZXQgdHJhaWxpbmcgPSB0cnVlXG5cbiAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBhIGZ1bmN0aW9uJylcbiAgfVxuICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICBsZWFkaW5nID0gJ2xlYWRpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMubGVhZGluZyA6IGxlYWRpbmdcbiAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nXG4gIH1cbiAgcmV0dXJuIGRlYm91bmNlKGZ1bmMsIHdhaXQsIHtcbiAgICBsZWFkaW5nOiBsZWFkaW5nLFxuICAgIG1heFdhaXQ6IHdhaXQsXG4gICAgdHJhaWxpbmc6IHRyYWlsaW5nXG4gIH0pXG59XG5cbmV4cG9ydCB7IGRlYm91bmNlLCB0aHJvdHRsZSB9XG4iXX0=