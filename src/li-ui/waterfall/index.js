"use strict";
Component({
    options: {
        multipleSlots: true,
        pureDataPattern: /_/,
    },
    data: {
        _views: [],
    },
    properties: {
        views: Array,
        span: {
            type: Array,
            value: [10, 10],
        },
        length: {
            type: Number,
            value: 10,
        },
        timeOut: {
            type: Number,
            value: 3000,
        },
        loadedClass: {
            type: String,
            value: '.loaded-view',
        },
        recycle: {
            type: Boolean,
            value: false,
        },
        skeleton: {
            type: Boolean,
            value: false,
        },
        skeletonSlot: {
            type: Boolean,
            value: false,
        },
    },
    methods: {
        loaded({ detail: { index, pIndex, height, width } }) {
            this.setData({
                [`views[${pIndex}][${index}].loaded`]: { height, width },
                [`_views[${pIndex}][${index}].loaded`]: { height, width },
            });
        },
        generateObserves({ index }) {
            const { views, _views } = this.data;
            this.setData({ [`_views[${index}]`]: views[index] });
            const view = this.createIntersectionObserver({
                initialRatio: 0,
            }).relativeToViewport({ top: 0, bottom: 0 });
            view.observe(`#placeholder-${index}`, (res) => {
                if (res.intersectionRatio <= 0) {
                    let show = index + 2;
                    let hide = index - 1;
                    let data = {};
                    if (res.boundingClientRect.top > 0) {
                        show = index - 2;
                        hide = index + 1;
                    }
                    if (_views[hide]) {
                        data = Object.assign({}, data, { [`views[${hide}]`]: [] });
                    }
                    if (_views[show]) {
                        data = Object.assign({}, data, { [`views[${show}]`]: _views[show] });
                    }
                    if (!Object.keys(data).length)
                        return;
                    wx.nextTick(() => this.triggerEvent('observe', { data }));
                }
            });
        },
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsU0FBUyxDQUFDO0lBQ1IsT0FBTyxFQUFFO1FBQ1AsYUFBYSxFQUFFLElBQUk7UUFDbkIsZUFBZSxFQUFFLEdBQUc7S0FDckI7SUFDRCxJQUFJLEVBQUU7UUFDSixNQUFNLEVBQUUsRUFBRTtLQUNYO0lBQ0QsVUFBVSxFQUFFO1FBQ1YsS0FBSyxFQUFFLEtBQUs7UUFDWixJQUFJLEVBQUU7WUFDSixJQUFJLEVBQUUsS0FBSztZQUNYLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUM7U0FDaEI7UUFDRCxNQUFNLEVBQUU7WUFDTixJQUFJLEVBQUUsTUFBTTtZQUNaLEtBQUssRUFBRSxFQUFFO1NBQ1Y7UUFDRCxPQUFPLEVBQUU7WUFDUCxJQUFJLEVBQUUsTUFBTTtZQUNaLEtBQUssRUFBRSxJQUFJO1NBQ1o7UUFDRCxXQUFXLEVBQUU7WUFDWCxJQUFJLEVBQUUsTUFBTTtZQUNaLEtBQUssRUFBRSxjQUFjO1NBQ3RCO1FBQ0QsT0FBTyxFQUFFO1lBQ1AsSUFBSSxFQUFFLE9BQU87WUFDYixLQUFLLEVBQUUsS0FBSztTQUNiO1FBQ0QsUUFBUSxFQUFFO1lBQ1IsSUFBSSxFQUFFLE9BQU87WUFDYixLQUFLLEVBQUUsS0FBSztTQUNiO1FBQ0QsWUFBWSxFQUFFO1lBQ1osSUFBSSxFQUFFLE9BQU87WUFDYixLQUFLLEVBQUUsS0FBSztTQUNiO0tBQ0Y7SUFDRCxPQUFPLEVBQUU7UUFDUCxNQUFNLENBQUMsRUFBRSxNQUFNLEVBQUUsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUNqRCxJQUFJLENBQUMsT0FBTyxDQUFDO2dCQUNYLENBQUMsU0FBUyxNQUFNLEtBQUssS0FBSyxVQUFVLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUU7Z0JBQ3hELENBQUMsVUFBVSxNQUFNLEtBQUssS0FBSyxVQUFVLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUU7YUFDMUQsQ0FBQyxDQUFBO1FBQ0osQ0FBQztRQUNELGdCQUFnQixDQUFDLEVBQUUsS0FBSyxFQUFFO1lBQ3hCLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQTtZQUNuQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEtBQUssR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQTtZQUNwRCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsMEJBQTBCLENBQUM7Z0JBQzNDLFlBQVksRUFBRSxDQUFDO2FBQ2hCLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUE7WUFDNUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsS0FBSyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRTtnQkFDNUMsSUFBSSxHQUFHLENBQUMsaUJBQWlCLElBQUksQ0FBQyxFQUFFO29CQUM5QixJQUFJLElBQUksR0FBRyxLQUFLLEdBQUcsQ0FBQyxDQUFBO29CQUNwQixJQUFJLElBQUksR0FBRyxLQUFLLEdBQUcsQ0FBQyxDQUFBO29CQUNwQixJQUFJLElBQUksR0FBRyxFQUFFLENBQUE7b0JBQ2IsSUFBSSxHQUFHLENBQUMsa0JBQWtCLENBQUMsR0FBRyxHQUFHLENBQUMsRUFBRTt3QkFDbEMsSUFBSSxHQUFHLEtBQUssR0FBRyxDQUFDLENBQUE7d0JBQ2hCLElBQUksR0FBRyxLQUFLLEdBQUcsQ0FBQyxDQUFBO3FCQUNqQjtvQkFDRCxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRTt3QkFDaEIsSUFBSSxxQkFBUSxJQUFJLElBQUUsQ0FBQyxTQUFTLElBQUksR0FBRyxDQUFDLEVBQUUsRUFBRSxHQUFFLENBQUE7cUJBQzNDO29CQUNELElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFO3dCQUNoQixJQUFJLHFCQUFRLElBQUksSUFBRSxDQUFDLFNBQVMsSUFBSSxHQUFHLENBQUMsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUUsQ0FBQTtxQkFDckQ7b0JBRUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTTt3QkFBRSxPQUFNO29CQUVyQyxFQUFFLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFBO2lCQUMxRDtZQUNILENBQUMsQ0FBQyxDQUFBO1FBQ0osQ0FBQztLQUNGO0NBQ0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiQ29tcG9uZW50KHtcbiAgb3B0aW9uczoge1xuICAgIG11bHRpcGxlU2xvdHM6IHRydWUsXG4gICAgcHVyZURhdGFQYXR0ZXJuOiAvXy8sXG4gIH0sXG4gIGRhdGE6IHtcbiAgICBfdmlld3M6IFtdLFxuICB9LFxuICBwcm9wZXJ0aWVzOiB7XG4gICAgdmlld3M6IEFycmF5LFxuICAgIHNwYW46IHtcbiAgICAgIHR5cGU6IEFycmF5LFxuICAgICAgdmFsdWU6IFsxMCwgMTBdLFxuICAgIH0sXG4gICAgbGVuZ3RoOiB7XG4gICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICB2YWx1ZTogMTAsXG4gICAgfSxcbiAgICB0aW1lT3V0OiB7XG4gICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICB2YWx1ZTogMzAwMCxcbiAgICB9LFxuICAgIGxvYWRlZENsYXNzOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICB2YWx1ZTogJy5sb2FkZWQtdmlldycsXG4gICAgfSxcbiAgICByZWN5Y2xlOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgdmFsdWU6IGZhbHNlLFxuICAgIH0sXG4gICAgc2tlbGV0b246IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICB2YWx1ZTogZmFsc2UsXG4gICAgfSxcbiAgICBza2VsZXRvblNsb3Q6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICB2YWx1ZTogZmFsc2UsXG4gICAgfSxcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGxvYWRlZCh7IGRldGFpbDogeyBpbmRleCwgcEluZGV4LCBoZWlnaHQsIHdpZHRoIH0gfSkge1xuICAgICAgdGhpcy5zZXREYXRhKHtcbiAgICAgICAgW2B2aWV3c1ske3BJbmRleH1dWyR7aW5kZXh9XS5sb2FkZWRgXTogeyBoZWlnaHQsIHdpZHRoIH0sXG4gICAgICAgIFtgX3ZpZXdzWyR7cEluZGV4fV1bJHtpbmRleH1dLmxvYWRlZGBdOiB7IGhlaWdodCwgd2lkdGggfSxcbiAgICAgIH0pXG4gICAgfSxcbiAgICBnZW5lcmF0ZU9ic2VydmVzKHsgaW5kZXggfSkge1xuICAgICAgY29uc3QgeyB2aWV3cywgX3ZpZXdzIH0gPSB0aGlzLmRhdGFcbiAgICAgIHRoaXMuc2V0RGF0YSh7IFtgX3ZpZXdzWyR7aW5kZXh9XWBdOiB2aWV3c1tpbmRleF0gfSlcbiAgICAgIGNvbnN0IHZpZXcgPSB0aGlzLmNyZWF0ZUludGVyc2VjdGlvbk9ic2VydmVyKHtcbiAgICAgICAgaW5pdGlhbFJhdGlvOiAwLFxuICAgICAgfSkucmVsYXRpdmVUb1ZpZXdwb3J0KHsgdG9wOiAwLCBib3R0b206IDAgfSlcbiAgICAgIHZpZXcub2JzZXJ2ZShgI3BsYWNlaG9sZGVyLSR7aW5kZXh9YCwgKHJlcykgPT4ge1xuICAgICAgICBpZiAocmVzLmludGVyc2VjdGlvblJhdGlvIDw9IDApIHtcbiAgICAgICAgICBsZXQgc2hvdyA9IGluZGV4ICsgMlxuICAgICAgICAgIGxldCBoaWRlID0gaW5kZXggLSAxXG4gICAgICAgICAgbGV0IGRhdGEgPSB7fVxuICAgICAgICAgIGlmIChyZXMuYm91bmRpbmdDbGllbnRSZWN0LnRvcCA+IDApIHtcbiAgICAgICAgICAgIHNob3cgPSBpbmRleCAtIDJcbiAgICAgICAgICAgIGhpZGUgPSBpbmRleCArIDFcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKF92aWV3c1toaWRlXSkge1xuICAgICAgICAgICAgZGF0YSA9IHsgLi4uZGF0YSwgW2B2aWV3c1ske2hpZGV9XWBdOiBbXSB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChfdmlld3Nbc2hvd10pIHtcbiAgICAgICAgICAgIGRhdGEgPSB7IC4uLmRhdGEsIFtgdmlld3NbJHtzaG93fV1gXTogX3ZpZXdzW3Nob3ddIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIU9iamVjdC5rZXlzKGRhdGEpLmxlbmd0aCkgcmV0dXJuXG5cbiAgICAgICAgICB3eC5uZXh0VGljaygoKSA9PiB0aGlzLnRyaWdnZXJFdmVudCgnb2JzZXJ2ZScsIHsgZGF0YSB9KSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICB9LFxufSlcbiJdfQ==